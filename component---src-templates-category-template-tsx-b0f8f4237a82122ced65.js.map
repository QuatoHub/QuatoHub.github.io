{"version":3,"file":"component---src-templates-category-template-tsx-b0f8f4237a82122ced65.js","mappings":"wLAIO,IAAMA,GAAgB,8FAGF,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,UAH1B,wBAOhBC,GAAa,+HAObC,GAAW,OAAOC,EAAAA,KAAP,qBAAH,yKAWG,SAAAN,GAAK,OAAIA,EAAMC,MAAMC,OAAOK,cAX/B,qC,UCiCrB,MAxCA,WACE,IAaMC,GAbmBC,EAAAA,EAAAA,gBAAc,cAA/BC,aAawBC,MAE1BC,EAAQJ,EACXK,KAAI,SAAAC,GAAQ,OAAIA,EAASC,cACzBC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,IAAM,GAEvC,OACEC,EAAAA,EAAAA,KAACpB,EAAD,MACEoB,EAAAA,EAAAA,KAACf,EAAD,kBACAe,EAAAA,EAAAA,KAACd,EAAD,CAAUe,IAAI,MAAMC,GAAG,MACrBF,EAAAA,EAAAA,KAAAA,OAAAA,KAAAA,OACCP,GAEFJ,EAAWK,KAAI,SAACC,GAAD,OACdK,EAAAA,EAAAA,KAACd,EAAD,CACEe,IAAKN,EAASQ,WACdD,GAAE,IAAMP,EAASQ,WAAWC,gBAE5BJ,EAAAA,EAAAA,KAAAA,OAAAA,KAAOL,EAASQ,YACfR,EAASC,kB,oGC1Cb,IAAMS,GAAoB,4GAMpBnB,GAAQ,0EAGV,SAAAL,GAAK,OAAIA,EAAMC,MAAMC,OAAOuB,YAHlB,KAMRC,GAAK,4G,UCSlB,MAfA,YAMI,IALFZ,EAKC,EALDA,SACAa,EAIC,EAJDA,MAKA,OACER,EAAAA,EAAAA,KAACK,EAAD,MACEL,EAAAA,EAAAA,KAACd,EAAD,KAAWS,IACXK,EAAAA,EAAAA,KAACO,EAAD,UAAUC,EAAV,Y,oBCUC,IA6BP,EA/CA,YAK2B,IAHdC,EAGa,EAJxBC,KACEC,MAASF,MAEXG,EACwB,EADxBA,YAEQjB,EAAoBiB,EAApBjB,SAAUa,EAAUI,EAAVJ,MAElB,OACER,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,KAACa,EAAAA,EAAD,CAAKC,MAAUnB,EAAL,oBACVK,EAAAA,EAAAA,KAACe,EAAD,CAAkBpB,SAAUA,EAAUa,MAAOA,KAC7CR,EAAAA,EAAAA,KAACgB,EAAAA,EAAD,CAAcL,MAAOF,KACrBT,EAAAA,EAAAA,KAACiB,EAAAA,EAAD","sources":["webpack://gatsby-starter-blog/./src/domains/category/CategoryList.style.tsx","webpack://gatsby-starter-blog/./src/domains/category/CategoryList.tsx","webpack://gatsby-starter-blog/./src/domains/category/SelectedCategory.style.tsx","webpack://gatsby-starter-blog/./src/domains/category/SelectedCategory.tsx","webpack://gatsby-starter-blog/./src/templates/CategoryTemplate.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport { Link } from 'gatsby';\n\nexport const CategoryListWrap = styled.div`\n  margin: 5rem 0 0;\n  padding: 3rem 2rem;\n  box-shadow: 0 0 0.4rem ${props => props.theme.colors.black02};\n  border-radius: 1rem;\n`;\n\nexport const CategoryLabel = styled.p`\n  padding: 0 0 3rem 0;\n  text-align: center;\n  font-size: 1.5rem;\n  cursor: default;\n`;\n\nexport const Category = styled(Link)`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 0 1.3rem;\n  padding: 1rem;\n  border-radius: 1rem;\n  font-size: 1.8rem;\n  font-weight: 700;\n  cursor: pointer;\n\n  :hover {\n    background-color: ${props => props.theme.colors.lightgray05};\n  }\n\n  :nth-last-of-type(1) {\n    margin: 0;\n  }\n`;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport {\n  CategoryListWrap,\n  CategoryLabel,\n  Category,\n} from './CategoryList.style';\n\nimport { CategoryProps, CategoryItemProps } from 'typings/index';\n\nfunction CategoryList() {\n  const { categoryList } = useStaticQuery<CategoryProps>(\n    graphql`\n      query {\n        categoryList: allMarkdownRemark(limit: 100) {\n          group(field: frontmatter___category) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `,\n  );\n\n  const categories = categoryList.group;\n\n  const total = categories\n    .map(category => category.totalCount)\n    .reduce((prev, curr) => prev + curr, 0);\n\n  return (\n    <CategoryListWrap>\n      <CategoryLabel>Category</CategoryLabel>\n      <Category key=\"ALL\" to=\"/\">\n        <span>ALL</span>\n        {total}\n      </Category>\n      {categories.map((category: CategoryItemProps) => (\n        <Category\n          key={category.fieldValue}\n          to={`/${category.fieldValue.toLowerCase()}`}\n        >\n          <span>{category.fieldValue}</span>\n          {category.totalCount}\n        </Category>\n      ))}\n    </CategoryListWrap>\n  );\n}\n\nexport default CategoryList;\n","import styled from '@emotion/styled';\n\nexport const SelectedCategoryWrap = styled.div`\n  margin: 6rem 0;\n  text-align: center;\n  cursor: default;\n`;\n\nexport const Category = styled.h1`\n  font-size: 4rem;\n  font-weight: 700;\n  color: ${props => props.theme.colors.primary10};\n`;\n\nexport const Count = styled.p`\n  margin: 3rem 0 0;\n  font-size: 1.8rem;\n  font-weight: 400;\n`;\n","import React from 'react';\n\nimport {\n  SelectedCategoryWrap,\n  Category,\n  Count,\n} from './SelectedCategory.style';\n\nfunction SelectedCategory({\n  category,\n  count,\n}: {\n  category: string;\n  count: number;\n}) {\n  return (\n    <SelectedCategoryWrap>\n      <Category>{category}</Category>\n      <Count>총 {count}개의 포스팅</Count>\n    </SelectedCategoryWrap>\n  );\n}\n\nexport default SelectedCategory;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport SEO from 'components/Layout/SEO';\nimport SelectedCategory from 'domains/category/SelectedCategory';\nimport PostItemList from 'components/PostList/PostItemList';\nimport CategoryList from 'domains/category/CategoryList';\n\nimport { CategoryTemplateProps } from 'typings/index';\n\nfunction CategoryTemplate({\n  data: {\n    posts: { edges },\n  },\n  pageContext,\n}: CategoryTemplateProps) {\n  const { category, count } = pageContext;\n\n  return (\n    <>\n      <SEO title={`${category} | MZ's Devlog`} />\n      <SelectedCategory category={category} count={count} />\n      <PostItemList posts={edges} />\n      <CategoryList />\n    </>\n  );\n}\n\nexport const categoryListQuery = graphql`\n  query Category($category: String) {\n    posts: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { category: { in: [$category] } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            summary\n            date(formatString: \"DD MMMM, YYYY\")\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 730)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n"],"names":["CategoryListWrap","props","theme","colors","black02","CategoryLabel","Category","Link","lightgray05","categories","useStaticQuery","categoryList","group","total","map","category","totalCount","reduce","prev","curr","___EmotionJSX","key","to","fieldValue","toLowerCase","SelectedCategoryWrap","primary10","Count","count","edges","data","posts","pageContext","SEO","title","SelectedCategory","PostItemList","CategoryList"],"sourceRoot":""}